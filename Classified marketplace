<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Classifieds — Buy & Sell (Demo)</title>
  <style>
    :root{
      --bg:#f6f7fb;--card:#fff;--muted:#6b7280;--accent:#0ea5a4;--shadow:0 6px 18px rgba(15,23,42,0.08);
      --max-width:1100px;
    }
    *{box-sizing:border-box}
    body{font-family:Inter,system-ui,Arial,sans-serif;margin:0;background:var(--bg);color:#0f172a}
    .container{max-width:var(--max-width);margin:28px auto;padding:0 18px}
    header{display:flex;align-items:center;justify-content:space-between;margin-bottom:18px}
    header h1{font-size:20px;margin:0}
    .controls{display:flex;gap:10px;align-items:center}
    input[type=search],select{padding:10px 12px;border-radius:10px;border:1px solid #e6eef2;background:white}
    button{background:var(--accent);color:white;border:none;padding:10px 14px;border-radius:10px;cursor:pointer;box-shadow:var(--shadow)}

    .layout{display:grid;grid-template-columns:1fr 320px;gap:20px}
    @media (max-width:900px){.layout{grid-template-columns:1fr}}

    .card{background:var(--card);border-radius:12px;padding:14px;box-shadow:var(--shadow)}
    .filters{display:flex;flex-direction:column;gap:12px}
    .filters h3{margin:0 0 6px 0;font-size:14px}

    .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(240px,1fr));gap:16px}
    .item{display:flex;flex-direction:column;gap:10px}
    .thumb{height:160px;border-radius:10px;background:#eef2f5;display:flex;align-items:center;justify-content:center;overflow:hidden}
    .thumb img{width:100%;height:100%;object-fit:cover}
    .meta{display:flex;justify-content:space-between;align-items:center}
    .title{font-weight:600}
    .price{color:var(--accent);font-weight:700}
    .muted{color:var(--muted);font-size:13px}

    .empty{padding:30px;text-align:center;color:var(--muted)}

    /* Modal form */
    .modal-backdrop{position:fixed;inset:0;background:rgba(2,6,23,0.45);display:none;align-items:center;justify-content:center;padding:20px}
    .modal{width:100%;max-width:820px;background:var(--card);border-radius:12px;padding:18px;box-shadow:0 20px 40px rgba(2,6,23,0.4)}
    .form-grid{display:grid;grid-template-columns:1fr 1fr;gap:12px}
    @media (max-width:640px){.form-grid{grid-template-columns:1fr}}
    label{font-size:13px;margin-bottom:6px;display:block}
    input,textarea,select{width:100%;padding:10px;border-radius:8px;border:1px solid #e6eef2;background:#fff}
    textarea{min-height:120px;resize:vertical}
    .images-preview{display:flex;gap:8px;flex-wrap:wrap;margin-top:8px}
    .img-prev{width:120px;height:80px;border-radius:8px;overflow:hidden;background:#f3f4f6;display:flex;align-items:center;justify-content:center}
    .img-prev img{width:100%;height:100%;object-fit:cover}

    .small{font-size:13px;color:var(--muted)}
    footer{margin-top:28px;text-align:center;color:var(--muted);font-size:13px}

    /* Listing actions */
    .actions{display:flex;gap:8px}
    .ghost{background:transparent;color:var(--muted);border:1px solid #e6eef2;padding:8px;border-radius:8px}

    /* responsive tweaks */
    @media (max-width:420px){.thumb{height:140px}}

  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>Classifieds — Buy & Sell Used Items</h1>
      <div class="controls">
        <input id="search" type="search" placeholder="Search items (title or description)…">
        <select id="categoryFilter">
          <option value="">All categories</option>
        </select>
        <button id="openCreate">Sell an item</button>
      </div>
    </header>

    <div class="layout">
      <main>
        <div class="card">
          <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:12px">
            <div><strong id="count"></strong> listings</div>
            <div class="small">Sorted by: <span id="sortLabel">Newest</span></div>
          </div>

          <div id="grid" class="grid"></div>
          <div id="empty" class="empty" style="display:none">No items found — add the first listing!</div>
        </div>
      </main>

      <aside>
        <div class="card filters">
          <h3>Filters</h3>
          <div>
            <label>Price range</label>
            <div style="display:flex;gap:8px"><input id="minPrice" placeholder="Min" type="number"><input id="maxPrice" placeholder="Max" type="number"></div>
          </div>

          <div>
            <label>Condition</label>
            <select id="conditionFilter">
              <option value="">Any</option>
              <option>Like New</option>
              <option>Good</option>
              <option>Fair</option>
            </select>
          </div>

          <div>
            <label>Quick sort</label>
            <select id="sort">
              <option value="new">Newest</option>
              <option value="price_asc">Price: Low to High</option>
              <option value="price_desc">Price: High to Low</option>
            </select>
          </div>

          <div style="margin-top:8px;display:flex;gap:8px">
            <button id="apply">Apply</button>
            <button id="reset" class="ghost">Reset</button>
          </div>
        </div>

        <div style="height:18px"></div>

        <div class="card small">
          <strong>Tips</strong>
          <ul>
            <li>Include clear photos</li>
            <li>Set a fair price</li>
            <li>Describe condition honestly</li>
          </ul>
        </div>
      </aside>
    </div>

    <footer>Demo app — data stored in your browser (localStorage)</footer>
  </div>

  <!-- Modal create -->
  <div id="modal" class="modal-backdrop">
    <div class="modal">
      <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:8px">
        <h2 style="margin:0">Create listing</h2>
        <div><button id="cancel" class="ghost">Close</button></div>
      </div>

      <form id="createForm">
        <div class="form-grid">
          <div>
            <label>Title</label>
            <input id="title" required>
          </div>
          <div>
            <label>Price (INR)</label>
            <input id="price" type="number" required>
          </div>

          <div>
            <label>Category</label>
            <input id="category" placeholder="e.g. Electronics, Furniture" required>
          </div>

          <div>
            <label>Condition</label>
            <select id="condition" required>
              <option>Like New</option>
              <option>Good</option>
              <option>Fair</option>
            </select>
          </div>

          <div style="grid-column:1/3">
            <label>Description</label>
            <textarea id="description"></textarea>
          </div>

          <div>
            <label>City</label>
            <input id="city">
          </div>

          <div>
            <label>Contact (phone or email)</label>
            <input id="contact">
          </div>

          <div style="grid-column:1/3">
            <label>Photos (up to 6)</label>
            <input id="images" type="file" accept="image/*" multiple>
            <div id="preview" class="images-preview"></div>
            <div class="small">Images are stored locally in your browser for this demo.</div>
          </div>
        </div>

        <div style="display:flex;gap:8px;margin-top:12px;justify-content:flex-end">
          <button type="submit">Publish</button>
          <button id="clearForm" type="button" class="ghost">Clear</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    // Simple client-side classifieds app (no server). Data persisted to localStorage.
    const LS_KEY = 'classifieds_demo_v1';
    let items = JSON.parse(localStorage.getItem(LS_KEY) || '[]');

    // DOM refs
    const grid = document.getElementById('grid');
    const empty = document.getElementById('empty');
    const countEl = document.getElementById('count');
    const searchIn = document.getElementById('search');
    const categoryFilter = document.getElementById('categoryFilter');
    const conditionFilter = document.getElementById('conditionFilter');
    const minPrice = document.getElementById('minPrice');
    const maxPrice = document.getElementById('maxPrice');
    const sortSel = document.getElementById('sort');
    const sortLabel = document.getElementById('sortLabel');

    const modal = document.getElementById('modal');
    const openCreate = document.getElementById('openCreate');
    const cancel = document.getElementById('cancel');
    const createForm = document.getElementById('createForm');
    const imagesIn = document.getElementById('images');
    const preview = document.getElementById('preview');
    const categoryIn = document.getElementById('category');

    // utility
    const uid = ()=> Date.now().toString(36) + Math.random().toString(36).slice(2,8);

    function save(){ localStorage.setItem(LS_KEY, JSON.stringify(items)); }

    function openModal(){ modal.style.display='flex' }
    function closeModal(){ modal.style.display='none'; createForm.reset(); preview.innerHTML=''; }

    openCreate.addEventListener('click', openModal);
    cancel.addEventListener('click', closeModal);
    modal.addEventListener('click', e=>{ if(e.target===modal) closeModal(); })

    // image preview -> store base64 in memory (limited to demo). Limit to 6 images.
    imagesIn.addEventListener('change', async (e)=>{
      preview.innerHTML='';
      const files = Array.from(e.target.files).slice(0,6);
      for(const f of files){
        const url = await toBase64(f);
        const el = document.createElement('div'); el.className='img-prev'; el.innerHTML = `<img src="${url}">`;
        preview.appendChild(el);
      }
    })

    function toBase64(file){ return new Promise((res,rej)=>{
      const r = new FileReader(); r.onload = ()=> res(r.result); r.onerror = rej; r.readAsDataURL(file);
    }) }

    // create listing
    createForm.addEventListener('submit', async (e)=>{
      e.preventDefault();
      const data = new FormData(createForm);
      const imgs = [];
      // collect preview images (base64) if any
      preview.querySelectorAll('img').forEach(img=> imgs.push(img.src));

      const listing = {
        id: uid(),
        title: data.get('title') || document.getElementById('title').value,
        price: Number(document.getElementById('price').value) || 0,
        category: document.getElementById('category').value || '',
        condition: document.getElementById('condition').value || '',
        description: document.getElementById('description').value || '',
        city: document.getElementById('city').value || '',
        contact: document.getElementById('contact').value || '',
        images: imgs,
        createdAt: new Date().toISOString(),
      };
      items.unshift(listing);
      save();
      render();
      closeModal();
      populateCategories();
    })

    document.getElementById('clearForm').addEventListener('click', ()=>{ createForm.reset(); preview.innerHTML=''; })

    // filters apply
    document.getElementById('apply').addEventListener('click', render);
    document.getElementById('reset').addEventListener('click', ()=>{
      searchIn.value=''; categoryFilter.value=''; conditionFilter.value=''; minPrice.value=''; maxPrice.value=''; sortSel.value='new'; render();
    })

    sortSel.addEventListener('change', ()=>{ sortLabel.textContent = sortSel.options[sortSel.selectedIndex].text; render(); })
    searchIn.addEventListener('input', debounce(render,300));

    // populate categories select from items
    function populateCategories(){
      const cats = Array.from(new Set(items.map(i=> (i.category||'').trim()).filter(Boolean))).sort();
      categoryFilter.innerHTML = '<option value="">All categories</option>' + cats.map(c=>`<option>${c}</option>`).join('');
      // also update create form suggestion
      // no typeahead here — keep simple
    }

    // render list
    function render(){
      const q = (searchIn.value||'').toLowerCase().trim();
      const cat = categoryFilter.value;
      const cond = conditionFilter.value;
      const min = Number(minPrice.value||0);
      const max = Number(maxPrice.value||Infinity);
      const sort = sortSel.value;

      let out = items.slice();
      if(q) out = out.filter(it=> (it.title+ ' ' + it.description).toLowerCase().includes(q));
      if(cat) out = out.filter(it=> (it.category||'')===cat);
      if(cond) out = out.filter(it=> (it.condition||'')===cond);
      out = out.filter(it=> it.price >= min && it.price <= max);

      if(sort==='price_asc') out.sort((a,b)=>a.price-b.price);
      else if(sort==='price_desc') out.sort((a,b)=>b.price-a.price);
      else out.sort((a,b)=> new Date(b.createdAt) - new Date(a.createdAt));

      grid.innerHTML = '';
      if(out.length===0){ empty.style.display='block'; countEl.textContent = 0; return; } else { empty.style.display='none'; }

      countEl.textContent = out.length;

      for(const it of out){
        const node = document.createElement('div'); node.className='card item';
        node.innerHTML = `
          <div class="thumb">${ it.images && it.images.length ? `<img src="${it.images[0]}">` : '<div style="padding:12px;text-align:center;color:var(--muted)">No photo</div>' }</div>
          <div style="display:flex;justify-content:space-between;align-items:start">
            <div>
              <div class="title">${escapeHtml(it.title)}</div>
              <div class="muted">${escapeHtml(it.city || '')} · ${escapeHtml(it.condition || '')}</div>
            </div>
            <div class="price">₹${Number(it.price).toLocaleString()}</div>
          </div>
          <div class="small" style="margin-top:6px">${escapeHtml(truncate(it.description||'',120))}</div>
          <div style="display:flex;justify-content:space-between;align-items:center;margin-top:8px">
            <div class="actions small">
              <button class="ghost" data-id="${it.id}" data-action="view">View</button>
              <button class="ghost" data-id="${it.id}" data-action="share">Share</button>
            </div>
            <div class="small">${new Date(it.createdAt).toLocaleDateString()}</div>
          </div>
        `;
        grid.appendChild(node);
      }

      // attach actions
      grid.querySelectorAll('button[data-action]').forEach(b=> b.addEventListener('click', (e)=>{
        const id = e.currentTarget.dataset.id; const action = e.currentTarget.dataset.action; const item = items.find(x=>x.id===id);
        if(action==='view') showDetails(item);
        if(action==='share') navigator.clipboard?.writeText(window.location.href + '#item=' + id).then(()=> alert('Listing link copied to clipboard'));
      }))
    }

    // small details popup using native prompt/alert for brevity
    function showDetails(it){
      if(!it) return alert('Item not found');
      const images = (it.images || []).map((s,i)=>`Image ${i+1}: ${s ? '\n' : ''}`).join('');
      const msg = `${it.title}\n\nPrice: ₹${Number(it.price).toLocaleString()}\nCategory: ${it.category}\nCondition: ${it.condition}\nCity: ${it.city}\nContact: ${it.contact}\n\nDescription:\n${it.description}`;
      // create simple overlay card
      const w = window.open('', '_blank', 'noopener,noreferrer');
      w.document.write(`<title>${escapeHtml(it.title)}</title><body style="font-family:system-ui;padding:18px"><h2>${escapeHtml(it.title)}</h2><p><strong>Price:</strong> ₹${Number(it.price).toLocaleString()}</p><p><strong>Contact:</strong> ${escapeHtml(it.contact)}</p><p>${escapeHtml(it.description).replace(/\n/g,'<br>')}</p>${ (it.images||[]).map(src=>`<img src="${src}" style="max-width:100%;margin-top:8px;display:block">`).join('') }</body>`);
    }

    // helpers
    function truncate(s,n){ return s.length>n ? s.slice(0,n-1)+'…' : s }
    function escapeHtml(s){ return String(s||'').replace(/[&<>"']/g, c=> ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'})[c]) }
    function debounce(fn,ms){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a),ms) } }

    // init sample data if empty
    if(items.length===0){
      items = [
        { id: uid(), title:'iPhone 11 — 64GB', price:15000, category:'Electronics', condition:'Good', description:'Used iPhone 11 in good condition. Battery 85%. Comes with charger.', city:'Bengaluru', contact:'seller@example.com', images:[], createdAt:new Date().toISOString() },
        { id: uid(), title:'Wooden Study Table', price:4500, category:'Furniture', condition:'Like New', description:'Solid wood table with drawer.', city:'Mysuru', contact:'9876543210', images:[], createdAt:new Date(Date.now()-86400000).toISOString() }
      ];
      save();
    }

    // support deep-link to item via #item=id
    function handleHash(){ const h = location.hash.replace('#',''); if(h.startsWith('item=')){ const id = h.split('=')[1]; const it = items.find(x=>x.id===id); if(it) showDetails(it); }}
    window.addEventListener('hashchange', handleHash);

    // initial render
    populateCategories(); render(); handleHash();

  </script>
</body>
</html>
